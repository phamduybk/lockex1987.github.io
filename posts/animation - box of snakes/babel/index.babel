class CreateCanvas{
	constructor (container, w, h) {
		this.container = document.querySelector(`${container}`);
		this.cnv = null;
		this.ctx = null;
		this.width = w;
		this.height = h;
		this.coord = Object.create(null);
		this.getCoordinates = this.getCoordinates.bind(this);
		this.getCanvas = this.getCanvas.bind(this);
		this.init();
	}
	createCanvas () {
		this.cnv = document.createElement('canvas');
		this.ctx = this.cnv.getContext('2d');
	}
	setSize () {
		this.cnv.width = this.width;
		this.cnv.height = this.height;
	}
	getCoordinates () {
		return this.coord;
	}
	getCanvasCoordinates () {
		let { top, left, bottom, right } = this.cnv.getBoundingClientRect();
		this.coord.top = top;
		this.coord.right = right;
		this.coord.bottom = bottom;
		this.coord.left = left;
		this.coord.cx = (right - left) / 2;
		this.coord.cy = (bottom - top) / 2;
		this.ctx.translate(this.coord.cx, this.coord.cy);
	}
	clear () {
		this.ctx.clearRect(-this.coord.cx, -this.coord.cy, this.width, this.height);
	}
	init () {
		this.createCanvas();
		this.setSize();
		this.container.appendChild(this.cnv);
		this.getCanvasCoordinates();
	}
	getCanvas () {
		return {
			ctx: this.ctx,
			cnv: this.cnv,
			w: this.width,
			h: this.height
		}
	}
}

class Snake {
	constructor (canvas) {
		this.canvas = canvas.getCanvas();
		this.positionBeforeCorrect = {x: 0, y: 0};
		this.coord = canvas.getCoordinates();
		this.angle = Math.floor(Math.random() * 30);
		this.inerty = this.getRandomToFrom(0.08, 0.1);
		this.botTimeUpdate = Math.floor(this.getRandomToFrom(100, 150));
		this.color = `hsl(${Math.floor(this.getRandomToFrom(0, 360))}, 50%, 50%)`;
		this.amount = 50;
		this.maxCircleSize = 5;
		this.circles = [];
		this.createCircle = this.createCircle.bind(this);
		this.setSnake = this.setSnake.bind(this);
		this.init();
	}
	normalize0between1(min, max, value){
		return (value - min) / (max - min);
	}
	getRandomToFrom (min, max) {
		return Math.random()*(max - (min)) + (min);
	}
	correctPosition (x, y) {
		return {
			x: x - this.coord.left - this.coord.cx,
			y: y - this.coord.top - this.coord.cy
		};
	}
	createCircleCoordinates (distance, i) {
		return {
			x: Math.floor( Math.sin(this.angle) * distance),
			y: Math.floor( Math.cos(this.angle) * distance),
			size: this.maxCircleSize * (1 - this.normalize0between1(0, this.amount, i))
		};
	}
	createCircle () {
		for(let i = 0; i < this.amount; i++){
			this.circles.push(this.createCircleCoordinates(i+5, i));	
		}	
	}
	setSnake () {
		this.circles.forEach((c, i, arr) => {
			if( i === 0 ){
				c.x += (c.x - this.positionBeforeCorrect.x) * -this.inerty;
				c.y += (c.y - this.positionBeforeCorrect.y) * -this.inerty;
				this.canvas.ctx.moveTo(c.x, c.y);
			}else{
				arr[i].x += (arr[i].x - arr[i-1].x) * -this.inerty;
				arr[i].y += (arr[i].y - arr[i-1].y) * -this.inerty;
				this.canvas.ctx.lineTo(arr[i].x, arr[i].y);
			}
			this.canvas.ctx.strokeStyle = this.color;
			this.canvas.ctx.stroke();
			this.canvas.ctx.beginPath();
			this.canvas.ctx.fillStyle = this.color;
			this.canvas.ctx.arc(c.x, c.y , c.size, 0, Math.PI *2);
			this.canvas.ctx.fill();
			this.canvas.ctx.stroke();	
		});	
	}
	setPosition ({x, y}) {
		this.positionBeforeCorrect = this.correctPosition(x, y);
		this.angle = Math.atan2(this.positionBeforeCorrect.x, this.positionBeforeCorrect.y);
		this.setSnake();
	}
	createBot () {
		let factor = 50;
		let previos = {
			x: Math.floor(this.getRandomToFrom(this.coord.left, this.coord.right)),
			y: Math.floor(this.getRandomToFrom(this.coord.top, this.coord.bottom))
		};
		setInterval (() => {
			let x1 = previos.x - factor;
			let x2 = previos.x + factor;
			let y1 = previos.y - factor;
			let y2 = previos.y + factor;
			if(x1 <= this.coord.left){
				x1 = this.coord.left;
			}
			if(x2 >= this.coord.right){
				x2 = this.coord.right;
			}
			if(y1 <= this.coord.top){
				y1 = this.coord.top;
			}
			if(y2 >= this.coord.bottom){
				y2 = this.coord.bottom;
			}
			let next = {
				x: Math.floor(this.getRandomToFrom(x1, x2)),
				y: Math.floor(this.getRandomToFrom(y1, y2))
			}
			this.setPosition({ x: next.x, y: next.y });
			previos = next;
		}, this.botTimeUpdate);	
	}
	output (pos) {
		console.log(pos)
	}
	
	init () {
		this.createCircle();
		this.setSnake();
		this.createBot();
	}
}

let canvas = new CreateCanvas('.canvas', 600, 600);

let coord = canvas.getCoordinates();

let snakes = [];

for(let i = 0; i < 5; i++){ snakes.push(new Snake(canvas)) };

function animation () {
	canvas.clear();
	snakes.forEach(snake => snake.setSnake());
	requestAnimationFrame(animation)
}
animation();

