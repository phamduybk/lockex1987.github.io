<!DOCTYPE html>
<html>
    <head>
        <title>parse-body-fragment</title>
        <link type="text/css" rel="stylesheet" href="style.css"/>
    </head>
    <body class="n1-cookbook">
        <div class="wrap">
            <div class="content">
                <div class="col1"><div class="recipe"> 
 <h1>Parsing a body fragment</h1> 
 <h2>Problem</h2> 
 <p>You have a fragment of body HTML (e.g. a <code>div</code> containing a couple of <code>p</code> tags; as opposed to a full HTML document) that you want to parse. Perhaps it was provided by a user submitting a comment, or editing the body of a page in a CMS.</p> 
 <h2>Solution</h2> 
 <p>Use the <code><a href="/apidocs/org/jsoup/Jsoup.html#parseBodyFragment(java.lang.String)" title="Parse a fragment of HTML, with the assumption that it forms the body of the HTML.">Jsoup.parseBodyFragment(String html)</a></code> method.</p> 
 <pre><code class="prettyprint">String html = &quot;&lt;div&gt;&lt;p&gt;Lorem ipsum.&lt;/p&gt;&quot;;
Document doc = Jsoup.parseBodyFragment(html);
Element body = doc.body();
</code></pre> 
 <h2>Description</h2> 
 <p>The <code>parseBodyFragment</code> method creates an empty shell document, and inserts the parsed HTML into the <code>body</code> element. If you used the normal <code><a href="/apidocs/org/jsoup/Jsoup.html#parse(java.lang.String)" title="Parse HTML into a Document.">Jsoup.parse(String html)</a></code> method, you would generally get the same result, but explicitly treating the input as a body fragment ensures that any bozo HTML provided by the user is parsed into the <code>body</code> element.</p> 
 <p>The <code><a href="/apidocs/org/jsoup/nodes/Document.html#body()" title="Accessor to the document's body element.">Document.body()</a></code> method retrieves the element children of the document's <code>body</code> element; it is equivalent to <code>doc.getElementsByTag(&quot;body&quot;)</code>.</p> 
 <h2>Stay safe</h2> 
 <p>If you are going to accept HTML input from a user, you need to be careful to avoid cross-site scripting attacks. See the documentation for the <code><a href="/apidocs/org/jsoup/safety/Whitelist.html" title="Whitelists define what HTML (elements and attributes) to allow through the cleaner.">Whitelist</a></code> based cleaner, and clean the input with <code><a href="/apidocs/org/jsoup/Jsoup.html#clean(java.lang.String, org.jsoup.safety.Whitelist)" title="Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted tags and attributes.">clean(String bodyHtml, Whitelist whitelist)</a></code>.</p> 
</div>
                </div>
                <div class="col2">
                    <div class="toc box">
                        <h2>Cookbook contents</h2>
                        <h3>Introduction</h3>
                        <ol start="1">
                            <li><a href="parsing-a-document.htm">Parsing and traversing a Document</a></li>
                        </ol>
                        <h3>Input</h3>
                        <ol start="2">
                            <li><a href="parse-document-from-string.htm">Parse a document from a String</a></li>
                            <li><a href="parse-body-fragment.htm">Parsing a body fragment</a></li>
                            <li><a href="load-document-from-url.htm">Load a Document from a URL</a></li>
                            <li><a href="load-document-from-file.htm">Load a Document from a File</a></li>
                        </ol>
                        <h3>Extracting data</h3>
                        <ol start="6">
                            <li><a href="dom-navigation.htm">Use DOM methods to navigate a document</a></li>
                            <li><a href="selector-syntax.htm">Use selector-syntax to find elements</a></li>
                            <li><a href="attributes-text-html.htm">Extract attributes, text, and HTML from elements</a></li>
                            <li><a href="working-with-urls.htm">Working with URLs</a></li>
                            <li><a href="example-list-links.htm">Example program: list links</a></li>
                        </ol>
                        <h3>Modifying data</h3>
                        <ol start="11">
                            <li><a href="set-attributes.htm">Set attribute values</a></li>
                            <li><a href="set-html.htm">Set the HTML of an element</a></li>
                            <li><a href="set-text.htm">Setting the text content of elements</a></li>
                        </ol>
                        <h3>Cleaning HTML</h3>
                        <ol start="14">
                            <li><a href="whitelist-sanitizer.htm">Sanitize untrusted HTML (to prevent XSS)</a></li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
