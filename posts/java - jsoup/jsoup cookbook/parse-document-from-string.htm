<!DOCTYPE html>
<html>
    <head>
        <title>parse-document-from-string</title>
        <link type="text/css" rel="stylesheet" href="style.css"/>
    </head>
    <body class="n1-cookbook">
        <div class="wrap">
            <div class="content">
                <div class="col1"><div class="recipe"> 
 <h1>Parse a document from a String</h1> 
 <h2>Problem</h2> 
 <p>You have HTML in a Java String, and you want to parse that HTML to get at its contents, or to make sure it's well formed, or to modify it. The String may have come from user input, a file, or from the web.</p> 
 <h2>Solution</h2> 
 <p>Use the static <code><a href="/apidocs/org/jsoup/Jsoup.html#parse(java.lang.String)" title="Parse HTML into a Document.">Jsoup.parse(String html)</a></code> method, or <code><a href="/apidocs/org/jsoup/Jsoup.html#parse(java.lang.String, java.lang.String)" title="Parse HTML into a Document.">Jsoup.parse(String html, String baseUri)</a></code> if the page came from the web, and you want to get at absolute URLs (see [working-with-urls]).</p> 
 <pre><code class="prettyprint">String html = &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;First parse&lt;/title&gt;&lt;/head&gt;&quot;
  + &quot;&lt;body&gt;&lt;p&gt;Parsed HTML into a doc.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;;
Document doc = Jsoup.parse(html);
</code></pre> 
 <h2>Description</h2> 
 <p>The <code><a href="/apidocs/org/jsoup/parser/Parser.html#parse(java.lang.String, java.lang.String)" title="Parse HTML into a Document.">parse(String html, String baseUri)</a></code> method parses the input HTML into a new <code><a href="/apidocs/org/jsoup/nodes/Document.html" title="A HTML Document.">Document</a></code>. The <code>base URI</code> argument is used to resolve relative URLs into absolute URLs, and should be set to the URL where the document was fetched from. If that's not applicable, or if you know the HTML has a <code>base</code> element, you can use the <code><a href="/apidocs/org/jsoup/Jsoup.html#parse(java.lang.String)" title="Parse HTML into a Document.">parse(String html)</a></code> method.</p> 
 <p>As long as you pass in a non-null string, you're guaranteed to have a successful, sensible parse, with a Document containing (at least) a <code>head</code> and a <code>body</code> element. (<b>BETA</b>: if you do get an exception raised, or a bad parse-tree, please <a href="/bugs">file a bug</a>.)</p> 
 <p>Once you have a Document, you can get get at the data using the appropriate methods in Document and its supers <code><a href="/apidocs/org/jsoup/nodes/Element.html" title="A HTML element consists of a tag name, attributes, and child nodes (including text nodes and other elements).">Element</a></code> and <code><a href="/apidocs/org/jsoup/nodes/Node.html" title="The base, abstract Node model.">Node</a></code>.</p> 
</div>
                </div>
                <div class="col2">
                    <div class="toc box">
                        <h2>Cookbook contents</h2>
                        <h3>Introduction</h3>
                        <ol start="1">
                            <li><a href="parsing-a-document.htm">Parsing and traversing a Document</a></li>
                        </ol>
                        <h3>Input</h3>
                        <ol start="2">
                            <li><a href="parse-document-from-string.htm">Parse a document from a String</a></li>
                            <li><a href="parse-body-fragment.htm">Parsing a body fragment</a></li>
                            <li><a href="load-document-from-url.htm">Load a Document from a URL</a></li>
                            <li><a href="load-document-from-file.htm">Load a Document from a File</a></li>
                        </ol>
                        <h3>Extracting data</h3>
                        <ol start="6">
                            <li><a href="dom-navigation.htm">Use DOM methods to navigate a document</a></li>
                            <li><a href="selector-syntax.htm">Use selector-syntax to find elements</a></li>
                            <li><a href="attributes-text-html.htm">Extract attributes, text, and HTML from elements</a></li>
                            <li><a href="working-with-urls.htm">Working with URLs</a></li>
                            <li><a href="example-list-links.htm">Example program: list links</a></li>
                        </ol>
                        <h3>Modifying data</h3>
                        <ol start="11">
                            <li><a href="set-attributes.htm">Set attribute values</a></li>
                            <li><a href="set-html.htm">Set the HTML of an element</a></li>
                            <li><a href="set-text.htm">Setting the text content of elements</a></li>
                        </ol>
                        <h3>Cleaning HTML</h3>
                        <ol start="14">
                            <li><a href="whitelist-sanitizer.htm">Sanitize untrusted HTML (to prevent XSS)</a></li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
