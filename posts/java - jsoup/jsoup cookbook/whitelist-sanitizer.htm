<!DOCTYPE html>
<html>
    <head>
        <title>whitelist-sanitizer</title>
        <link type="text/css" rel="stylesheet" href="style.css"/>
    </head>
    <body class="n1-cookbook">
        <div class="wrap">
            <div class="content">
                <div class="col1"><div class="recipe"> 
 <h1>Sanitize untrusted HTML (to prevent XSS)</h1> 
 <h2>Problem</h2> 
 <p>You want to allow untrusted users to supply HTML for output on your website (e.g. as comment submission). You need to clean this HTML to avoid <a href="http://en.wikipedia.org/wiki/Cross-site_scripting">cross-site scripting</a> (XSS) attacks.</p> 
 <h2>Solution</h2> 
 <p>Use the jsoup HTML <code><a href="/apidocs/org/jsoup/safety/Cleaner.html" title="The whitelist based HTML cleaner.">Cleaner</a></code> with a configuration specified by a <code><a href="/apidocs/org/jsoup/safety/Whitelist.html" title="Whitelists define what HTML (elements and attributes) to allow through the cleaner.">Whitelist</a></code>.</p> 
 <pre><code class="prettyprint">String unsafe = 
  &quot;&lt;p&gt;&lt;a href='http://example.com/' onclick='stealCookies()'&gt;Link&lt;/a&gt;&lt;/p&gt;&quot;;
String safe = Jsoup.clean(unsafe, Whitelist.basic());
// now: &lt;p&gt;&lt;a href=&quot;http://example.com/&quot; rel=&quot;nofollow&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
</code></pre> 
 <h2>Discussion</h2> 
 <p>A cross-site scripting attack against your site can really ruin your day, not to mention your users'. Many sites avoid XSS attacks by not allowing HTML in user submitted content: they enforce plain text only, or use an alternative markup syntax like wiki-text or Markdown. These are seldom optimal solutions for the user, as they lower expressiveness, and force the user to learn a new syntax.</p> 
 <p>A better solution may be to use a rich text WYSIWYG editor (like <a href="http://ckeditor.com/">CKEditor</a> or <a href="http://tinymce.moxiecode.com/">TinyMCE</a>). These output HTML, and allow the user to work visually. However, their validation is done on the client side: you need to apply a server-side validation to clean up the input and ensure the HTML is safe to place on your site. Otherwise, an attacker can avoid the client-side Javascript validation and inject unsafe HMTL directly into your site</p> 
 <p>The jsoup whitelist sanitizer works by parsing the input HTML (in a safe, sand-boxed environment), and then iterating through the parse tree and only allowing known-safe tags and attributes (and values) through into the cleaned output.</p> 
 <p>It does not use regular expressions, which are inappropriate for this task.</p> 
 <p>jsoup provides a range of <code><a href="/apidocs/org/jsoup/safety/Whitelist.html" title="Whitelists define what HTML (elements and attributes) to allow through the cleaner.">Whitelist</a></code> configurations to suit most requirements; they can be modified if necessary, but take care.</p> 
 <p>The cleaner is useful not only for avoiding XSS, but also in limiting the range of elements the user can provide: you may be OK with textual <code><a href="/apidocs/org/jsoup/select/Evaluator.CssNthEvaluator.html#a">a</a></code>, <code>strong</code> elements, but not structural <code>div</code> or <code>table</code> elements.</p> 
 <h2>See also</h2> 
 <ul> 
  <li>See the <a href="http://ha.ckers.org/xss.html">XSS cheat sheet</a> and filter evasion guide, as an example of how regular-expression filters don't work, and why a safe whitelist parser-based sanitizer is the correct approach.</li> 
  <li>See the <code><a href="/apidocs/org/jsoup/safety/Cleaner.html" title="The whitelist based HTML cleaner.">Cleaner</a></code> reference if you want to get a <code><a href="/apidocs/org/jsoup/nodes/Document.html" title="A HTML Document.">Document</a></code> instead of a String return</li> 
  <li>See the <code><a href="/apidocs/org/jsoup/safety/Whitelist.html" title="Whitelists define what HTML (elements and attributes) to allow through the cleaner.">Whitelist</a></code> reference for the different canned options, and to create a custom whitelist</li> 
  <li>The <a href="http://en.wikipedia.org/wiki/Nofollow">nofollow</a> link attribute</li> 
 </ul> 
</div>
                </div>
                <div class="col2">
                    <div class="toc box">
                        <h2>Cookbook contents</h2>
                        <h3>Introduction</h3>
                        <ol start="1">
                            <li><a href="parsing-a-document.htm">Parsing and traversing a Document</a></li>
                        </ol>
                        <h3>Input</h3>
                        <ol start="2">
                            <li><a href="parse-document-from-string.htm">Parse a document from a String</a></li>
                            <li><a href="parse-body-fragment.htm">Parsing a body fragment</a></li>
                            <li><a href="load-document-from-url.htm">Load a Document from a URL</a></li>
                            <li><a href="load-document-from-file.htm">Load a Document from a File</a></li>
                        </ol>
                        <h3>Extracting data</h3>
                        <ol start="6">
                            <li><a href="dom-navigation.htm">Use DOM methods to navigate a document</a></li>
                            <li><a href="selector-syntax.htm">Use selector-syntax to find elements</a></li>
                            <li><a href="attributes-text-html.htm">Extract attributes, text, and HTML from elements</a></li>
                            <li><a href="working-with-urls.htm">Working with URLs</a></li>
                            <li><a href="example-list-links.htm">Example program: list links</a></li>
                        </ol>
                        <h3>Modifying data</h3>
                        <ol start="11">
                            <li><a href="set-attributes.htm">Set attribute values</a></li>
                            <li><a href="set-html.htm">Set the HTML of an element</a></li>
                            <li><a href="set-text.htm">Setting the text content of elements</a></li>
                        </ol>
                        <h3>Cleaning HTML</h3>
                        <ol start="14">
                            <li><a href="whitelist-sanitizer.htm">Sanitize untrusted HTML (to prevent XSS)</a></li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
